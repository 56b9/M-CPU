;fff = value for print store 
;0 - f = char array with address equaling ASCII character
SEG 0 ADDRESS 0
LSP ffff ;set stack pointer to max
LSG MS f ;set memory segment to 15
GSR aaa ;setup array for register display 
GOTO ff ;jump ahead to main program

SEG 0 ADDRESS 8
RSR ;ignore keyboard input

SEG 0 ADDRESS ff
LDI A 1 
PUSH A
ADD A B A 
POP B 
STA A N 0 fff ;load result to print store 
GSR fff ;call print subroutine
JUMPIFNC 100 ;contine adding 
HALT ;halt if overflow 

SEG 0 ADDRESS aaa ;char array setup 
LDI A 30 
STA A N 0 0 
LDI A 31 
STA A N 0 1
LDI A 32 
STA A N 0 2
LDI A 33 
STA A N 0 3
LDI A 34 
STA A N 0 4
LDI A 35 
STA A N 0 5
LDI A 36 
STA A N 0 6
LDI A 37 
STA A N 0 7
LDI A 38 
STA A N 0 8
LDI A 39 
STA A N 0 9
LDI A 41 
STA A N 0 a
LDI A 42 
STA A N 0 b
LDI A 43 
STA A N 0 c
LDI A 44 
STA A N 0 d
LDI A 45 
STA A N 0 e
LDI A 46 
STA A N 0 f               
RSR

SEG 0 ADDRESS fff ;print hex value subroutine
LDA D N 0 fff; get value 
MOV D E ;move value into four registers  
MOV D X 
MOV D Y 
MOV D Z
LDI C c ;first for loop 
LDI D 1 
SUB C D C
RSHIFT E E;shift first character 12 places
JUMPIFNZ 106 ;contine loop if not end condition 
LDI C f ;mask to four bits 
AND E C E
SETF 8 ;clear zero flag 
LDI C 8 ;second for loop 
LDI D 1
SUB C D C 
RSHIFT X X;shift second character 8 places 
JUMPIFNZ 10c ;contine loop if not end condition 
LDI C f ;mask to four bits
AND X C X
SETF 8 ;clear zero flag
LDI C 4 ;third for loop 
LDI D 1
SUB C D C 
RSHIFT Y Y ;shift third character 4 places
JUMPIFNZ 113 ;contine loop if not end condition 
LDI C f ;mask to four bits 
AND Y C Y
AND Z C Z ;mask z, no shifting required 
LDA C E 1 0 ;get first char 
STA C N 0 3f ;output enable
STA C N 0 40 ;display first char 
LDA C X 1 0 ;get second char 
STA C N 0 40 ;display second char 
LDA C Y 1 0 ;get third char 
STA C N 0 40 ;display third char 
LDA C Z 1 0 ;get last char 
STA C N 0 40 ;display last char 
LDI C a ;load newline 
STA C N 0 40 ;print newline 
RSR 